import { KindeIdTokenProhibitedClaims, KindeAccessTokenProhibitedClaims, Kindem2mTokenProhibitedClaims } from './prohibitedClaims.ts';
import { createKindeAPIOptions, KindeAPIRequest, KindeDesignerCustomProperties, KindeFetchOptions, OrgCode, WorkflowEvents } from './types';
export * from './types';
export declare const version: string;
type KindePlaceholder = `@${string}@`;
/**
 * Returns mutatable ID Token object
 */
export declare function idTokenCustomClaims<T extends object>(): Omit<T, KindeIdTokenProhibitedClaims>;
/**
 * Returns mutatable access token object
 */
export declare function accessTokenCustomClaims<T extends object>(): Omit<T, KindeAccessTokenProhibitedClaims>;
/**
 * Returns mutatable M2M token object
 */
export declare function m2mTokenClaims<T extends object>(): Omit<T, Kindem2mTokenProhibitedClaims>;
/**
 * Gets the environment variable from the Kinde buisness dashboard
 * @param key
 */
export declare function getEnvironmentVariable<T = string>(key: T): {
    value: string;
    isSecret: boolean;
};
/**
 * Gets the environment variable from the Kinde buisness dashboard
 * @param key
 */
export declare function getLocalization(key: string): string;
/**
 * Deny access to the user
 * @param reason Reason for denying access
 */
export declare function denyAccess(reason: string): void;
/**
 * Invalidate a Kinde widget form field
 * @param fieldName Name of the field to invalidate
 * @param message Reason for invalidating the field
 */
export declare function invalidateFormField(fieldName: string, message: string): void;
/**
 * Fetch data from an external API
 * @param url URL of the API
 * @param options Fetch options
 */
export declare function fetch<T = any>(url: string, options: KindeFetchOptions): Promise<T>;
/**
 * Fetch data from a secure external API
 *
 * Encryption keys can be setup in the Kinde dashboard under workflows > encryption keys
 * @param url URL of the API
 * @param options Fetch options
 */
export declare function secureFetch<T = any>(url: string, options: KindeFetchOptions): Promise<T>;
/**
 * create a Kinde API client
 * @param baseURL Base URL of the Kinde API
 * @returns Kinde API client
 */
export declare function createKindeAPI(event: WorkflowEvents, options?: createKindeAPIOptions): Promise<{
    get: (params: Omit<KindeAPIRequest, "method">) => Promise<{
        data: any;
    }>;
    post: (params: Omit<KindeAPIRequest, "method">) => Promise<{
        data: any;
    }>;
    patch: (params: Omit<KindeAPIRequest, "method">) => Promise<{
        data: any;
    }>;
    put: (params: Omit<KindeAPIRequest, "method">) => Promise<{
        data: any;
    }>;
    delete: (params: Omit<KindeAPIRequest, "method">) => Promise<{
        data: any;
    }>;
}>;
/**
 *
 * @returns Kinde placeholder for the main page content
 */
export declare const getKindeWidget: () => KindePlaceholder;
/**
 *
 * @returns Kinde placeholder for the nonce
 */
export declare const getKindeNonce: () => KindePlaceholder;
/**
 *
 * @returns Kinde placeholder for the required CSS
 */
export declare const getKindeRequiredCSS: () => KindePlaceholder;
/**
 *
 * @returns Kinde placeholder for the required JS
 */
export declare const getKindeRequiredJS: () => KindePlaceholder;
/**
 *
 * @returns Kinde placeholder for the CSRF token
 */
export declare const getKindeCSRF: () => KindePlaceholder;
/**
 *
 * @returns Register URL Placeholder
 */
export declare const getKindeRegisterUrl: () => KindePlaceholder;
/**
 *
 * @returns Login URL Placeholder
 */
export declare const getKindeLoginUrl: () => KindePlaceholder;
/**
 *
 * @returns Register URL Placeholder
 */
export declare const getKindeSignUpUrl: () => KindePlaceholder;
/**
 *
 * @returns Login URL Placeholder
 */
export declare const getKindeSignInUrl: () => KindePlaceholder;
/**
 *
 * @returns Light Mode Logo Placeholder
 */
export declare const getLogoUrl: (orgCode?: OrgCode) => string;
/**
 *
 * @returns Dark Mode Logo Placeholder
 */
export declare const getDarkModeLogoUrl: (orgCode?: OrgCode) => string;
/**
 *
 * @returns SVG FavIcon Placeholder
 */
export declare const getSVGFaviconUrl: (orgCode?: OrgCode) => string;
/**
 *
 * @returns Fallback FavIcon Placeholder
 */
export declare const getFallbackFaviconUrl: (orgCode?: OrgCode) => string;
/**
 * Sets custom properties for the Kinde Designer.
 *
 * @param {KindeDesignerCustomProperties} params - The parameters for setting custom properties.
 * @param {string} params.baseBackgroundColor - The base background color.
 * @param {string} params.baseLinkColor - The base link color.
 * @param {string} params.buttonBorderRadius - The border radius for buttons.
 * @param {string} params.primaryButtonBackgroundColor - The background color for primary buttons.
 * @param {string} params.primaryButtonColor - The color for primary buttons.
 * @param {string} params.cardBorderRadius - The border radius for cards.
 * @param {string} params.inputBorderRadius - The border radius for input fields.
 * @returns {string} A string of CSS custom properties
 */
export declare const setKindeDesignerCustomProperties: ({ baseBackgroundColor, baseLinkColor, buttonBorderRadius, primaryButtonBackgroundColor, primaryButtonColor, cardBorderRadius, inputBorderRadius, }: KindeDesignerCustomProperties) => string;
