var m = /* @__PURE__ */ ((e) => (e.UserTokenGeneration = "user:tokens_generation", e.M2MTokenGeneration = "m2m:token_generation", e.ExistingPasswordProvided = "user:existing_password_provided", e.NewPasswordProvided = "user:new_password_provided", e))(m || {});
const u = "0.2.2", p = u, c = (e, n) => {
  if (!e || e.includes(".."))
    throw new Error("Invalid asset path");
  return `/${e}?${n ? `p_org_code=${n}&` : ""}cache=@8973ff883c2c40e1bad198b543e12b24@`;
}, k = {
  get(e, n, t) {
    return Reflect.get(e, n.toString(), t);
  },
  set(e, n, t) {
    return kinde.idToken.setCustomClaim(n, t), Reflect.set(e, n, t);
  }
}, b = {
  get(e, n, t) {
    return Reflect.get(e, n.toString(), t);
  },
  set(e, n, t) {
    return kinde.accessToken.setCustomClaim(n, t), Reflect.set(e, n, t);
  }
}, h = {
  get(e, n, t) {
    return Reflect.get(e, n.toString(), t);
  },
  set(e, n, t) {
    return kinde.m2mToken.setCustomClaim(n, t), Reflect.set(e, n, t);
  }
};
function C() {
  if (!kinde.idToken)
    throw new Error(
      "IdToken binding not available, please add to workflow/page settings to enable"
    );
  const e = kinde.idToken.getCustomClaims();
  return new Proxy(
    e,
    k
  );
}
function S() {
  if (!kinde.accessToken)
    throw new Error(
      "accessToken binding not available, please add to workflow/page settings to enable"
    );
  const e = kinde.accessToken.getCustomClaims();
  return new Proxy(
    e,
    b
  );
}
function I() {
  if (!kinde.m2mToken)
    throw new Error(
      "m2mToken binding not available, please add to workflow/page settings to enable"
    );
  const e = kinde.m2mToken.getCustomClaims();
  return new Proxy(
    e,
    h
  );
}
function s(e) {
  if (!kinde.env)
    throw new Error(
      "env binding not available, please add to workflow/page settings to enable"
    );
  return kinde.env.get(e);
}
function $(e) {
  if (!kinde.localization)
    throw new Error(
      "localization binding not available, please add to workflow/page settings to enable"
    );
  return kinde.localization.get(e);
}
function K(e) {
  if (!kinde.auth)
    throw new Error("auth binding not available");
  kinde.auth.denyAccess(e);
}
function U(e, n) {
  if (!kinde.widget)
    throw new Error("widget binding not available");
  kinde.widget.invalidateFormField(e, n);
}
async function v(e, n) {
  if (!kinde.fetch)
    throw new Error("fetch binding not available");
  return n.responseFormat || (n.responseFormat = "json"), {
    data: (await kinde.fetch(e, n))?.json
  };
}
async function P(e, n) {
  if (!kinde.secureFetch)
    throw new Error("secureFetch binding not available");
  return n.responseFormat || (n.responseFormat = "json"), {
    data: (await kinde.secureFetch(e, n))?.json
  };
}
async function x(e, n) {
  let t, i;
  if (!URLSearchParams)
    throw new Error("url binding not available");
  if (n?.clientId && n?.clientSecret)
    t = n.clientId, i = n.clientSecret;
  else if (n?.clientIdKey && n?.clientSecretKey)
    t = s(n.clientIdKey)?.value, i = s(n.clientSecretKey)?.value;
  else {
    if (t = s("KINDE_WF_M2M_CLIENT_ID")?.value, i = s("KINDE_WF_M2M_CLIENT_SECRET")?.value, !t)
      throw new Error("M2M client ID not set");
    if (!i)
      throw new Error("M2M client secret not set");
  }
  const { data: a } = await v(
    `${e.context.domains.kindeDomain}/oauth2/token`,
    {
      method: "POST",
      responseFormat: "json",
      headers: {
        "Content-type": "application/x-www-form-urlencoded"
      },
      body: new URLSearchParams({
        audience: `${e.context.domains.kindeDomain}/api`,
        grant_type: "client_credentials",
        client_id: t,
        client_secret: i
      })
    }
  ), r = async ({
    method: o,
    endpoint: f,
    params: d,
    contentType: w = "application/json"
  }) => ({ data: (await kinde.fetch(
    `${e.context.domains.kindeDomain}/api/v1/${f}`,
    {
      method: o,
      responseFormat: "json",
      headers: {
        authorization: `Bearer ${a.access_token}`,
        "Content-Type": w,
        accept: "application/json"
      },
      body: d && new URLSearchParams(d)
    }
  )).json });
  return {
    get: async (o) => await r({ method: "GET", ...o }),
    post: async (o) => await r({ method: "POST", ...o }),
    patch: async (o) => await r({ method: "PATCH", ...o }),
    put: async (o) => await r({ method: "PUT", ...o }),
    delete: async (o) => await r({ method: "DELETE", ...o })
  };
}
const l = "@b1d3a51558e64036ad072b56ebae37f5@", g = "@847681e125384709836f921deb311104@", D = () => "@cd65da2987c740d58961024aa4a27194@", M = () => "@43dffdf2c22f40e9981303cb383f6fac@", j = () => "@ce0ef44d50f6408985f00c04a85d8430@", R = () => "@8103c7ff23fe49edb9b0537d2927e74e@", A = () => "@0c654432670c4d0292c3a0bc3c533247@", L = () => l, G = () => g, N = () => l, V = () => g, z = (e) => c("logo", e), H = (e) => c("logo_dark", e), q = (e) => c("favicon_svg", e), O = (e) => c("favicon_fallback", e), E = (e) => !e || /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$|^rgb\(.*\)$|^rgba\(.*\)$/.test(e), T = (e) => !e || /^(0|\d+(.(\d)+)?(%|px|rem|em))$/.test(e), _ = (...e) => e.every(E) || void 0, y = (...e) => e.every(T) || void 0, J = ({
  baseBackgroundColor: e,
  baseLinkColor: n,
  buttonBorderRadius: t,
  primaryButtonBackgroundColor: i,
  primaryButtonColor: a,
  cardBorderRadius: r,
  inputBorderRadius: o
}) => {
  if (!_(
    e,
    n,
    i,
    a
  ))
    throw console.log("baseBackgroundColor: ", e), console.log("baseLinkColor: ", n), console.log("primaryButtonBackgroundColor: ", i), console.log("primaryButtonColor: ", a), new Error("Invalid color value provided");
  if (!y(t, r, o))
    throw console.log("buttonBorderRadius: ", t), console.log("cardBorderRadius: ", r), console.log("inputBorderRadius: ", o), new Error("Invalid border radius value provided");
  return [
    e && `--kinde-designer-base-background-color: ${e};`,
    n && `--kinde-designer-base-link-color: ${n};`,
    r && `--kinde-designer-card-border-radius: ${r};`,
    t && `--kinde-designer-button-border-radius: ${t};`,
    o && `--kinde-designer-control-select-text-border-radius: ${o};`,
    i && `--kinde-designer-button-primary-background-color: ${i};`,
    a && `--kinde-designer-button-primary-color: ${a};`
  ].filter(Boolean).join(`
`);
};
export {
  m as WorkflowTrigger,
  S as accessTokenCustomClaims,
  x as createKindeAPI,
  K as denyAccess,
  v as fetch,
  H as getDarkModeLogoUrl,
  s as getEnvironmentVariable,
  O as getFallbackFaviconUrl,
  A as getKindeCSRF,
  G as getKindeLoginUrl,
  M as getKindeNonce,
  L as getKindeRegisterUrl,
  j as getKindeRequiredCSS,
  R as getKindeRequiredJS,
  V as getKindeSignInUrl,
  N as getKindeSignUpUrl,
  D as getKindeWidget,
  $ as getLocalization,
  z as getLogoUrl,
  q as getSVGFaviconUrl,
  C as idTokenCustomClaims,
  U as invalidateFormField,
  I as m2mTokenClaims,
  P as secureFetch,
  J as setKindeDesignerCustomProperties,
  p as version
};
